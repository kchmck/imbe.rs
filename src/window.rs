pub fn synthesis_full() -> Window {
    Window::new(&WINDOW_SYNTHESIS[..])
}

pub fn synthesis_trunc() -> Window {
    Window::new(&WINDOW_SYNTHESIS[1..WINDOW_SYNTHESIS.len()-1])
}

pub fn refinement() -> Window {
    Window::new(&WINDOW_REFINEMENT[..])
}

pub struct Window {
    coefs: &'static [f32],
    offset: isize,
}

impl Window {
    pub fn new(coefs: &'static [f32]) -> Window {
        Window {
            coefs: coefs,
            offset: coefs.len() as isize / 2,
        }
    }

    pub fn get(&self, n: isize) -> f32 {
        match self.coefs.get((n + self.offset) as usize) {
            Some(&coef) => coef,
            None => 0.0,
        }
    }
}

// w_S(n)
static WINDOW_SYNTHESIS: [f32; 211] = [
    0.000000,
    0.020000,
    0.040000,
    0.060000,
    0.080000,
    0.100000,
    0.120000,
    0.140000,
    0.160000,
    0.180000,
    0.200000,
    0.220000,
    0.240000,
    0.260000,
    0.280000,
    0.300000,
    0.320000,
    0.340000,
    0.360000,
    0.380000,
    0.400000,
    0.420000,
    0.440000,
    0.460000,
    0.480000,
    0.500000,
    0.520000,
    0.540000,
    0.560000,
    0.580000,
    0.60000,
    0.620000,
    0.640000,
    0.660000,
    0.680000,
    0.700000,
    0.720000,
    0.740000,
    0.760000,
    0.780000,
    0.800000,
    0.820000,
    0.840000,
    0.860000,
    0.880000,
    0.900000,
    0.920000,
    0.940000,
    0.960000,
    0.980000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.00000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    1.000000,
    0.980000,
    0.960000,
    0.940000,
    0.920000,
    0.900000,
    0.880000,
    0.860000,
    0.840000,
    0.820000,
    0.800000,
    0.780000,
    0.760000,
    0.740000,
    0.720000,
    0.700000,
    0.680000,
    0.660000,
    0.640000,
    0.620000,
    0.600000,
    0.580000,
    0.560000,
    0.540000,
    0.520000,
    0.500000,
    0.480000,
    0.460000,
    0.440000,
    0.420000,
    0.400000,
    0.380000,
    0.360000,
    0.340000,
    0.320000,
    0.300000,
    0.280000,
    0.260000,
    0.240000,
    0.220000,
    0.200000,
    0.180000,
    0.160000,
    0.140000,
    0.120000,
    0.100000,
    0.080000,
    0.060000,
    0.040000,
    0.020000,
    0.00000,
];

// w_R(n)
static WINDOW_REFINEMENT: [f32; 221] = [
    0.014873,
    0.017397,
    0.020102,
    0.022995,
    0.026081,
    0.029365,
    0.032852,
    0.036546,
    0.040451,
    0.044573,
    0.048915,
    0.053482,
    0.058277,
    0.063303,
    0.068563,
    0.074062,
    0.079801,
    0.085782,
    0.092009,
    0.098483,
    0.105205,
    0.112176,
    0.119398,
    0.126872,
    0.134596,
    0.142572,
    0.150799,
    0.159276,
    0.168001,
    0.176974,
    0.186192,
    0.195653,
    0.205355,
    0.215294,
    0.225466,
    0.235869,
    0.246497,
    0.257347,
    0.268413,
    0.279689,
    0.291171,
    0.302851,
    0.314724,
    0.326782,
    0.339018,
    0.351425,
    0.363994,
    0.376718,
    0.389588,
    0.402594,
    0.415727,
    0.428978,
    0.442337,
    0.455793,
    0.469336,
    0.482955,
    0.496640,
    0.510379,
    0.524160,
    0.537971,
    0.551802,
    0.565639,
    0.579470,
    0.593284,
    0.607067,
    0.620807,
    0.634490,
    0.648105,
    0.661638,
    0.675076,
    0.688406,
    0.701616,
    0.714692,
    0.727620,
    0.740390,
    0.752986,
    0.765397,
    0.777610,
    0.789612,
    0.801391,
    0.812935,
    0.824231,
    0.835267,
    0.846033,
    0.856516,
    0.866705,
    0.876589,
    0.886157,
    0.895400,
    0.904307,
    0.912868,
    0.921074,
    0.928916,
    0.936386,
    0.943474,
    0.950174,
    0.956477,
    0.962377,
    0.967866,
    0.972940,
    0.977592,
    0.981817,
    0.985610,
    0.988967,
    0.991884,
    0.994358,
    0.996386,
    0.997966,
    0.999095,
    0.999774,
    1.000000,
    0.999774,
    0.999095,
    0.997966,
    0.996386,
    0.994358,
    0.991884,
    0.988967,
    0.985610,
    0.981817,
    0.977592,
    0.972940,
    0.967866,
    0.962377,
    0.956477,
    0.950174,
    0.943474,
    0.936386,
    0.928916,
    0.921074,
    0.912868,
    0.904307,
    0.895400,
    0.886157,
    0.876589,
    0.866705,
    0.856516,
    0.846033,
    0.835267,
    0.824231,
    0.812935,
    0.801391,
    0.789612,
    0.777610,
    0.765397,
    0.752986,
    0.740390,
    0.727620,
    0.714692,
    0.701616,
    0.688406,
    0.675076,
    0.661638,
    0.648105,
    0.634490,
    0.620807,
    0.607067,
    0.593284,
    0.579470,
    0.565639,
    0.551802,
    0.537971,
    0.524160,
    0.510379,
    0.496640,
    0.482955,
    0.469336,
    0.455793,
    0.442337,
    0.428978,
    0.415727,
    0.402594,
    0.389588,
    0.376718,
    0.363994,
    0.351425,
    0.339018,
    0.326782,
    0.314724,
    0.302851,
    0.291171,
    0.279689,
    0.268413,
    0.257347,
    0.246497,
    0.235869,
    0.225466,
    0.215294,
    0.205355,
    0.195653,
    0.186192,
    0.176974,
    0.168001,
    0.159276,
    0.150799,
    0.142572,
    0.134596,
    0.126872,
    0.119398,
    0.112176,
    0.105205,
    0.098483,
    0.092009,
    0.085782,
    0.079801,
    0.074062,
    0.068563,
    0.063303,
    0.058277,
    0.053482,
    0.048915,
    0.044573,
    0.040451,
    0.036546,
    0.032852,
    0.029365,
    0.026081,
    0.022995,
    0.020102,
    0.017397,
    0.014873,
];

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_syn_trunc() {
        let w = synthesis_trunc();

        assert_eq!(w.get(-200), 0.0);
        assert_eq!(w.get(-105), 0.0);
        assert_eq!(w.get(-104), 0.02);
        assert_eq!(w.get(-56), 0.98);
        assert_eq!(w.get(-88), 0.34);
        assert_eq!(w.get(104), 0.02);
        assert_eq!(w.get(105), 0.0);
        assert_eq!(w.get(200), 0.0);
    }

    #[test]
    fn test_syn_full() {
        let w = synthesis_full();

        assert_eq!(w.get(-200), 0.0);
        assert_eq!(w.get(-106), 0.0);
        assert_eq!(w.get(-105), 0.0);
        assert_eq!(w.get(-68), 0.74);
        assert_eq!(w.get(77), 0.56);
        assert_eq!(w.get(105), 0.0);
        assert_eq!(w.get(106), 0.0);
        assert_eq!(w.get(200), 0.0);
    }

    #[test]
    fn test_refine() {
        let w = refinement();

        assert_eq!(w.get(-200), 0.0);
        assert_eq!(w.get(-110), 0.014873);
        assert_eq!(w.get(-24), 0.876589);
        assert_eq!(w.get(68), 0.314724);
        assert_eq!(w.get(110), 0.014873);
        assert_eq!(w.get(200), 0.0);
    }
}
